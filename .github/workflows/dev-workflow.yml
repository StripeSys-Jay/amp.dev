name: AMP.DEV CI/CD WorkFlow

on:
  push:
    branches: [ env-check ]

jobs:

  getBranch_and_commitHash:
    runs-on: ubuntu-latest

    outputs:
      output1: ${{ steps.branch.outputs.git_branch }}
      output2: ${{ steps.hash.outputs.git_hash }}
    steps:
      - name: Get Branch
        id: branch
#        run: echo "git_branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
        run: echo "::set-output name=git_branch::${GITHUB_REF#refs/heads/}"

      - name: Get Hash
        id: hash
#        run: echo "git_hash=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV
        run: echo "::set-output name=git_hash::$(echo $GITHUB_SHA | cut -c1-7)"

  Build_and_Push:
    runs-on: ubuntu-latest
    needs: getBranch_and_commitHash
    
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push AMP.DEV Docker Image
        uses: docker/build-push-action@v3
        with:
          platforms: linux/amd64
          tags: div1114/amp-dev:${{needs.getBranch_and_commitHash.outputs.output1}}-${{needs.getBranch_and_commitHash.outputs.output2}}
          build-args: |
            "AMP_DOC_TOKEN=${{ secrets.AMP_DOC_TOKEN }}"
          push: true

  deployToDevEnv:
    runs-on: ubuntu-latest
    needs: [getBranch_and_commitHash, Build_and_Push]

    steps: 

      - name: DeployToEC2
    
        env:
            PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
            HOSTNAME : ${{ secrets.EC2_HOSTNAME  }}
            USER_NAME : ${{ secrets.EC2_USERNAME  }}
                        
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ec2-user@3.92.215.143 "
          
          echo ${{ secrets.DOCKERHUB_TOKEN }}  | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          docker stop amp-dev
          docker rm amp-dev
          docker rmi -f $(docker images -q --filter=reference='ubuntu:*')
          docker run -itd --name amp-dev -p 8080:8080 8083:8083 div1114/amp-dev:${{needs.getBranch_and_commitHash.outputs.output1}}-${{needs.getBranch_and_commitHash.outputs.output2}}
          "